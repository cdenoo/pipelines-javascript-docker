# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '8660dbfa-9e09-4c52-b188-1a7c7da5c893'
  imageRepository: 'cdenoopipelinesjavascriptdocker'
  containerRegistry: 'denoocecreg.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'myimagepullsecretv2'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  

stages:
# - stage: Build
#   displayName: Build stage
#   jobs:  
#   - job: Build
#     displayName: Build
#     pool:
#       vmImage: $(vmImageName)
#     steps:
#     - task: Docker@2
#       displayName: Build and push an image to container registry
#       inputs:
#         command: buildAndPush
#         repository: $(imageRepository)
#         dockerfile: $(dockerfilePath)
#         containerRegistry: $(dockerRegistryServiceConnection)
#         tags: |
#           $(tag)
#           latest

- stage: Deploy
  displayName: Deploy stage
  # dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: pipelines-javascript-docker
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          # - task: HelmInstaller@1
          #   displayName: Install helm version 3.1.1
          #   inputs:
          #     helmVersionToInstall: '3.1.1'
          # - task: HelmDeploy@0
          #   inputs:
          #     connectionType: 'Kubernetes Service Connection'
          #     kubernetesServiceConnection: 'KUBE'
          #     command: 'install'
          #     chartType: 'FilePath'
          #     chartPath: './newchart'
          # - task: HelmDeploy@0
          #   inputs:
          #     connectionType: 'Kubernetes Service Connection'
          #     kubernetesServiceConnection: 'KUBE'
          #     command: 'ls'
          - script: dir
            displayName: List contents of a folder
            workingDirectory: $(Agent.HomeDirectory)